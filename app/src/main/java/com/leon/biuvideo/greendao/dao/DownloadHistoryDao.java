package com.leon.biuvideo.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_HISTORY".
*/
public class DownloadHistoryDao extends AbstractDao<DownloadHistory, Long> {

    public static final String TABLENAME = "DOWNLOAD_HISTORY";

    /**
     * Properties of entity DownloadHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ResType = new Property(1, int.class, "resType", false, "RES_TYPE");
        public final static Property ResKey = new Property(2, String.class, "resKey", false, "RES_KEY");
        public final static Property ResStreamUrl = new Property(3, String.class, "resStreamUrl", false, "RES_STREAM_URL");
        public final static Property IsMultipleAnthology = new Property(4, boolean.class, "isMultipleAnthology", false, "IS_MULTIPLE_ANTHOLOGY");
        public final static Property LevelOneId = new Property(5, String.class, "levelOneId", false, "LEVEL_ONE_ID");
        public final static Property LevelTwoId = new Property(6, String.class, "levelTwoId", false, "LEVEL_TWO_ID");
        public final static Property Title = new Property(7, String.class, "title", false, "TITLE");
        public final static Property CoverUrl = new Property(8, String.class, "coverUrl", false, "COVER_URL");
        public final static Property ResPath = new Property(9, String.class, "resPath", false, "RES_PATH");
        public final static Property DanmakuFilePath = new Property(10, String.class, "danmakuFilePath", false, "DANMAKU_FILE_PATH");
    }


    public DownloadHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_HISTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"RES_TYPE\" INTEGER NOT NULL ," + // 1: resType
                "\"RES_KEY\" TEXT," + // 2: resKey
                "\"RES_STREAM_URL\" TEXT," + // 3: resStreamUrl
                "\"IS_MULTIPLE_ANTHOLOGY\" INTEGER NOT NULL ," + // 4: isMultipleAnthology
                "\"LEVEL_ONE_ID\" TEXT," + // 5: levelOneId
                "\"LEVEL_TWO_ID\" TEXT," + // 6: levelTwoId
                "\"TITLE\" TEXT," + // 7: title
                "\"COVER_URL\" TEXT," + // 8: coverUrl
                "\"RES_PATH\" TEXT," + // 9: resPath
                "\"DANMAKU_FILE_PATH\" TEXT);"); // 10: danmakuFilePath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getResType());
 
        String resKey = entity.getResKey();
        if (resKey != null) {
            stmt.bindString(3, resKey);
        }
 
        String resStreamUrl = entity.getResStreamUrl();
        if (resStreamUrl != null) {
            stmt.bindString(4, resStreamUrl);
        }
        stmt.bindLong(5, entity.getIsMultipleAnthology() ? 1L: 0L);
 
        String levelOneId = entity.getLevelOneId();
        if (levelOneId != null) {
            stmt.bindString(6, levelOneId);
        }
 
        String levelTwoId = entity.getLevelTwoId();
        if (levelTwoId != null) {
            stmt.bindString(7, levelTwoId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String coverUrl = entity.getCoverUrl();
        if (coverUrl != null) {
            stmt.bindString(9, coverUrl);
        }
 
        String resPath = entity.getResPath();
        if (resPath != null) {
            stmt.bindString(10, resPath);
        }
 
        String danmakuFilePath = entity.getDanmakuFilePath();
        if (danmakuFilePath != null) {
            stmt.bindString(11, danmakuFilePath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getResType());
 
        String resKey = entity.getResKey();
        if (resKey != null) {
            stmt.bindString(3, resKey);
        }
 
        String resStreamUrl = entity.getResStreamUrl();
        if (resStreamUrl != null) {
            stmt.bindString(4, resStreamUrl);
        }
        stmt.bindLong(5, entity.getIsMultipleAnthology() ? 1L: 0L);
 
        String levelOneId = entity.getLevelOneId();
        if (levelOneId != null) {
            stmt.bindString(6, levelOneId);
        }
 
        String levelTwoId = entity.getLevelTwoId();
        if (levelTwoId != null) {
            stmt.bindString(7, levelTwoId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(8, title);
        }
 
        String coverUrl = entity.getCoverUrl();
        if (coverUrl != null) {
            stmt.bindString(9, coverUrl);
        }
 
        String resPath = entity.getResPath();
        if (resPath != null) {
            stmt.bindString(10, resPath);
        }
 
        String danmakuFilePath = entity.getDanmakuFilePath();
        if (danmakuFilePath != null) {
            stmt.bindString(11, danmakuFilePath);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownloadHistory readEntity(Cursor cursor, int offset) {
        DownloadHistory entity = new DownloadHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // resType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // resKey
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // resStreamUrl
            cursor.getShort(offset + 4) != 0, // isMultipleAnthology
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // levelOneId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // levelTwoId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // title
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // coverUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // resPath
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // danmakuFilePath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setResType(cursor.getInt(offset + 1));
        entity.setResKey(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setResStreamUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsMultipleAnthology(cursor.getShort(offset + 4) != 0);
        entity.setLevelOneId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLevelTwoId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCoverUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setResPath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDanmakuFilePath(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownloadHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownloadHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownloadHistory entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
